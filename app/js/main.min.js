(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Curiosity = function () {
    function Curiosity(button, curiousElement, curiousInput) {
        _classCallCheck(this, Curiosity);

        this.button = button;
        this.curiousElement = curiousElement;
        this.curiousInput = curiousInput;
    }

    _createClass(Curiosity, [{
        key: 'deleteCurious',
        value: function deleteCurious() {
            /**
             * Удаление интереса
             */
            var curiousEl = this.curiousElement;
            $(document).on('click', curiousEl, function (event) {
                this.remove();
            });
        }
    }, {
        key: 'errorTextOutput',
        value: function errorTextOutput(value) {
            /**
             * Вывод текста ошибки
             */
            alert(value);
        }
    }, {
        key: 'createCurious',
        value: function createCurious(curiousText) {
            /**
             * Создание интереса
             */
            var newCurious = document.createElement('div');
            var container = document.getElementById("interestsContainer");

            newCurious.className = 'profileArticle-interests__element';
            newCurious.innerHTML = curiousText;

            container.insertBefore(newCurious, container.children[0]);
        }
    }, {
        key: 'checkInputValue',
        value: function checkInputValue(input) {
            /**
             * Проверка поля:
             * 1. Кол-во символов
             * 2. Наличие любых символов кроме буквенных
             * Если всё "ок" то создаём интерес
             */
            var inputTextValue = $(input).val();
            var errorText = void 0;
            if (inputTextValue.length == 0 || inputTextValue.length > 16) {
                errorText = 'Должно быть от 1 до 16 символов!';
                this.errorTextOutput(errorText);
            } else if (!inputTextValue.match(/[^a-zA-Zа-яА-Я]/g)) {
                this.createCurious(inputTextValue);
            } else {
                errorText = 'Подозрительные символы!!';
                this.errorTextOutput(errorText);
            }
        }
    }, {
        key: 'addCurious',
        value: function addCurious() {
            /**
             * Создание интереса по клику на кнопку "Добавить интерес"
             * Запускается функция проверки поля
             */
            var self = this;
            var curiousBtn = $(this.button);

            curiousBtn.on('click', function () {
                self.checkInputValue(curiousInput);
            });
        }
    }, {
        key: 'init',
        value: function init() {
            /**
             * Инициализация методов
             */
            this.deleteCurious();
            this.addCurious();
        }
    }]);

    return Curiosity;
}();

var something = new Curiosity('#addCurious', '.profileArticle-interests__element', '#curiousInput');

something.init();

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ProfileEdit = function () {
    function ProfileEdit(selector, selectorText) {
        _classCallCheck(this, ProfileEdit);

        this.selectorText = selectorText;
    }

    _createClass(ProfileEdit, [{
        key: 'checkLocalData',
        value: function checkLocalData(input) {
            /**
             * Проверка на наличие данных в LocalStorage
             */
            $(input).each(function () {

                var thisDataAttr = $(this).attr('data-local');
                var localData = localStorage.getItem(thisDataAttr);

                if (localData) {
                    $(this).val(localData);
                    $(this).parent().find('.profileArticle__field-text_text').text(localData);
                } else {
                    return false;
                }
            });
        }
    }, {
        key: 'mainEdit',
        value: function mainEdit(selector, selectorText) {
            /**
             * Основной метод редактирования карточки пользователя
             */
            var selectorInput = $(selectorText).parent().find('.profileArticle__field-text_input');
            var selectorR = selector;

            function toggleItems(selector) {
                var toggleItems = $(selector).parent().find('.profileArticle__field-text');
                toggleItems.toggle();
            }

            $(selectorText).on('click', function (event) {

                toggleItems(this);
                $(this).parent().find('.profileArticle__field-text_input').focus();
            });

            $(selectorInput).on('focusout', function () {
                toggleItems(this);

                var thisInputValue = $(this).val();
                var thisDataAttr = $(this).attr('data-local');

                localStorage.setItem(thisDataAttr, thisInputValue);

                $(this).parent().find('.profileArticle__field-text_text').text(thisInputValue);
            });
        }
    }, {
        key: 'init',
        value: function init() {
            this.checkLocalData('.profileArticle__field-text_input');
            this.mainEdit(this.selector, this.selectorText);
        }
    }]);

    return ProfileEdit;
}();

var initProfileEdit = new ProfileEdit('.profileArticle__field_editable', '.profileArticle__field-text_text');
initProfileEdit.init();

},{}],3:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TabsControll = function () {
    function TabsControll(container) {
        _classCallCheck(this, TabsControll);

        this.headElement = $(container).find('.customTabs-head__element');
        this.bodyElement = $(container).find('.customTabs-body__tab');
    }

    _createClass(TabsControll, [{
        key: 'tabClick',
        value: function tabClick() {
            /**
             * Клик по табам
             * меняем контент опираясь 
             * на индекс текущего активного элемента
             */
            var hEl = this.headElement;
            var bEl = this.bodyElement;
            hEl.on('click', function () {
                var thisIndex = $(this).index();
                hEl.removeClass('customTabs-head__element_active');
                $(this).addClass('customTabs-head__element_active');

                bEl.removeClass('customTabs-body__tab_active');
                bEl.eq(thisIndex).addClass('customTabs-body__tab_active');
            });
        }
    }, {
        key: 'init',
        value: function init() {
            /**
             * Инициализация методов
             */
            this.tabClick();
            var setRowContainerHeight = new TabsRowContainerHeight('#rowContainer');
            setRowContainerHeight.init();
        }
    }]);

    return TabsControll;
}();

;

var TabsRowContainerHeight = function () {
    function TabsRowContainerHeight(rowContainer) {
        _classCallCheck(this, TabsRowContainerHeight);

        this.rowContainer = rowContainer;
        this.rowElement = $(rowContainer).find('.customTabs-body__row');
        this.totalHeight = 0;
    }

    _createClass(TabsRowContainerHeight, [{
        key: 'init',
        value: function init() {
            /**
             * 1. Вычисляем высоту 3-х рядов с карточками друзей
             * 2. Инициализируем кастомный скроллбар
             * 3. Ставим максимальную высоту главной обёртке кастомного скроллбара
             */
            var container = this.rowContainer;
            var tHeight = this.totalHeight;
            var rElement = this.rowElement;
            rElement.each(function (index) {
                if (index <= 2) {
                    tHeight += $(this).innerHeight();
                }
            });

            var totalHeightCalc = tHeight - 30;

            $(container).scrollbar();
            $('.m__scroll-overflow').css('maxHeight', totalHeightCalc + 'px');
        }
    }]);

    return TabsRowContainerHeight;
}();

;

var tabsControllerInit = new TabsControll('#tabsContainer');
tabsControllerInit.init();

},{}],4:[function(require,module,exports){
'use strict';

require('./custom/tabs');

require('./custom/curiosity.js');

require('./custom/profile-edit.js');

},{"./custom/curiosity.js":1,"./custom/profile-edit.js":2,"./custom/tabs":3}]},{},[4]);
